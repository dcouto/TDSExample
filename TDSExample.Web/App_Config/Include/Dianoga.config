<!--
	Dianoga image optimization framework configuration
	Automatically optimizes Sitecore media library images before sending them to the client,
	including if they have been resized by Sitecore
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<pipelines>
			<initialize>
				<!-- Replaces the default MediaManager.Cache implementation with one that optimizes images on the way to cache -->
				<processor type="Dianoga.Pipelines.Initialize.MediaCacheReplacer, Dianoga" />
			</initialize>
		</pipelines>

		<settings>
			<!-- 
				The default resizing quality for JPEGs is extremely high (95) which wastes bandwidth.
				Community recommendations place the optimal JPEG quality/size ratio between 70 and 80.
			-->
			<setting name="Media.Resizing.Quality">
				<patch:attribute name="value">72</patch:attribute>
			</setting>
		</settings>

		<dianoga>
			<!--
				OPTIMIZERS
				You can register the optimizers you want Dianoga to use here.
				The first optimizer that says it can optimize something wins.
				Optimizers inherit IImageOptimizer and are instantiated with the Sitecore Factory,
				so you can inject parameters and property values.
			-->
			<optimizers>
				<!-- note: for these paths you can use web-relative paths (/foo, ~/foo) as well as absolute (c:\...) -->
				<optimizer type="Dianoga.Png.PngOptimizer, Dianoga">
					<DllPath>/Dianoga Tools/PNGOptimizer/PNGOptimizerDll.dll</DllPath>
				</optimizer>
				<optimizer type="Dianoga.Jpeg.JpegOptimizer, Dianoga">
					<ExePath>/Dianoga Tools/libjpeg/jpegtran.exe</ExePath>
				</optimizer>

				<!-- Optionally, you can use a PNG Quantizer for the PNG optimization instead of PngOptimizer.
				Note: this is a lossy optimization. However, it is also all native .NET.
				<optimizer type="Dianoga.Png.PngQuantOptimizer, Dianoga" />-->
			</optimizers>
		</dianoga>
	</sitecore>
</configuration>